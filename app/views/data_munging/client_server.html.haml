%header
	%h1 Netzkommunikation
%section
	%h2 Netzkommunikation - Clients und  Server
	%article
		%ul
			%li Stark vereinfacht kann man sagen, dass Internet sei ein Netzwerk bestehend Rechnern, auf diesen Rechnern befinden sich Resourcen.
			%li Jeder Rechner hat eine bestimmte Adresse (IP) und Resourcen auf diesem Rechner können unter einer bestimmten URL rreicht werden.
			%li Die Rechner die Resourcen bereit stellen nennt man Server, das System das Resourcen abfragt nennt man Client.
			%li Die Kommunikation erfolgt zustandslos über HTTP.
	%h2 Webserver
	%p Webserver bieten eine Rahmen in dem statische Daten bereitgestellt und mit verschiedenen Mitteln wie z.B. CGI-Skripten, Servlets und Webframeworks auch dynamische Anwendungen zur Kommunikation mit einem Client ermöglicht werden können.
	%article
		%h3 Verbreitete Webserverimplementierungen
		%ul
			%li Apache HTTP Server
			%li Microsoft Internet Information Services
			%li Lighttpd
			%li nginx
			%li Apache Tomcat
			%li jBoss
			%li jetty
		%h3 Webserver - Entwicklungsumgebung
		%p Beim Entwicklen von Anwendungen ist die Konfiguration eines kompletten Webservers oft zu zeitaufwendig. Deshalb werden oft embeded Server benutzt. Das heißt über ein Webframework kann eine Webserverimplementierung gestartet werden, die das aktuelle Projekt als Dienst zugänglich macht.
		Eine ähnliche Funktion wird auch von IDEs wir IntelliJ, Netbenas oder Eclipse zur Verfügung gestellt, wobei hier verschiedene Server-Container gewählt werden können.
		%ul
			%li Ruby on Rails, Sinatra -> WEBrick
			%li Lift, Scalatra -> jetty
			%li Eclipse, Netbenas, IntelliJ -> Tomcat
			%li Netbans -> GlassFish
			%li ...
			
	%h2 Clients
	%p Clients können entweder der klassische Web-Browser oder aber auch andere Server oder Programme sein.
	
		

	
		
